generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text     String
  authorid String @db.Uuid
  postid   Int
  users    users  @relation(fields: [authorid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts    posts  @relation(fields: [postid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model groups {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(255)
  userstogroups userstogroups[]
}

model posts {
  id       Int        @id @default(autoincrement())
  authorid String     @db.Uuid
  title    String     @db.VarChar(255)
  content  String
  comments comments[]
  users    users      @relation(fields: [authorid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model profileinfo {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userid   String @unique @db.Uuid
  metadata Json?
  users    users  @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @db.VarChar(255)
  email         String          @unique @db.VarChar(255)
  password      String          @db.VarChar(255)
  comments      comments[]
  posts         posts[]
  profileinfo   profileinfo?
  userstogroups userstogroups[]
}

model userstogroups {
  userid  String @db.Uuid
  groupid Int
  groups  groups @relation(fields: [groupid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users  @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userid, groupid])
}
